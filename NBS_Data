package com.nbs;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.TimeZone;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;

import org.apache.log4j.Logger;



public class NBSData {
	
	
	
	
	public static void main(String[] args) throws IOException {
		
		/* Get actual class name to be printed on */
		 Logger log = Logger.getLogger(NBSData.class.getName());
	
		 Properties properties = new Properties(); 
		 properties.load(new FileInputStream("gcdmIds.properties"));
		
	
		 	
		//Read gcdm ids from properties file
		String sgcdm_id= properties.getProperty("sgcdm_id");
		String gcdm_id[] = sgcdm_id.split(",");
			
		//Read network ids from proerpties file
		String snetwork_id= properties.getProperty("snetwork_id");
		String network_id[] = snetwork_id.split(",");
		
			
		
		String start = args[0];
		String end = args[1]; 
		
		long epochStart = getEpochTime(start);
		long epochEnd = getEpochTime(end);
		
		log.info("Starting job from " +start+ " to " + end);
	
		FileWriter fstream = new FileWriter("/usr/local/code/nbs/nbs_api_history/nbs_output.txt");
		
	     BufferedWriter out = new BufferedWriter(fstream);
		
		for (int i = 0; i < gcdm_id.length; i++) {
			
			for (int j = 0; j<network_id.length; j++) 
			{
				URL nbs_url = new URL("http://wmg.api3.nextbigsound.com/metrics/external/"+gcdm_id[i]+".json");
				try{
					URLConnection conn = nbs_url.openConnection();
					conn.setDoOutput(true);
					OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
					writer.write("key=wseu0pl8cnl6yf77soyuhf4exrlvyf&start="+epochStart+"&end="+epochEnd+"&network_metric_id="+network_id[j]);
					writer.flush();
					
					try{
						BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
						StringBuilder jsonString = new StringBuilder();
						String res;
						while((res = br.readLine())!=null)
						{
							jsonString.append(res);
						}
						JSONArray socialMediaArray = (JSONArray)JSONSerializer.toJSON("["+jsonString.toString()+"]");

						for(int index=0;index<socialMediaArray.size();index++) {
							JSONObject socialMedia= (JSONObject)socialMediaArray.get(index);
						//	To get the artist details
							JSONObject service= (JSONObject)socialMedia.getJSONObject("artist");
							int id=service.getInt("id");
							String name=service.getString("name");
						//	To get the network metric details
							JSONObject network_metric= (JSONObject)socialMedia.getJSONObject("network_metric");
							int network_metric_id=network_metric.getInt("id");
							String network_metric_name=network_metric.getString("name");
						//	Storing the URL field values into variables
							String location=socialMedia.getString("url");
						//	TO retrieve the data values into an array
							JSONObject data=(JSONObject)socialMedia.getJSONObject("data");
							String values=data.getString("values");
							if(values.contains("[]")==true)
							{
								values="";
							}
							String valuesData[]=values.split(",");
						//	Looping the values array for each artist
							
								
							long epochtime=epochStart;
							
							for(int d=0;d<=valuesData.length;d++){
								
								if(epochtime<epochEnd){
									
									log.info("Epochtime is "+epochtime);
																	
								String values1=(valuesData[d].substring(valuesData[d].indexOf(":")+1).trim());
								if(values1.contains("}")==true)
								{
									values1=values1.replace('}',' ');
								}
								
								
								
								log.info("GCDM id: "+gcdm_id[i]);
								//Printing the variables//
								out.write(gcdm_id[i]+",");
								out.write(id+",");							
								out.write(name+",");
								out.write(network_metric_id+",");
								out.write(network_metric_name+",");	
								out.write(location.trim()+",");
								out.write(epochtime+",");
								out.write(getDate(epochtime)+",");
								out.write(values1);
								out.newLine();	
								
																						
						//		incrementing the epoch time  
									epochtime=epochtime+86400;
									
									
								}
							
						}
							
					}
						
						
					}
					
					catch (Exception e) {
						
						log.info("Artist ID" +gcdm_id[i] + " not present for network id "+network_id[j]);
						// TODO: handle exception
					}
				}
				catch (Exception e) {
					//do nothing
				}
			}
		}
		out.close();
	}
	
	
	
	//Get the epoch time from the date string
	public static long getEpochTime(String sdate) {
		
		/* Get actual class name to be printed on */
		 Logger log = Logger.getLogger(NBSData.class.getName());


		SimpleDateFormat df = new SimpleDateFormat("MM/dd/yy");
		Date date;
		long epochTime = 0;
		try {
			date = df.parse(sdate);
			epochTime = date.getTime() / 1000 - 5 * 3600;
			log.info("Epoch time for "+sdate+ " is " + epochTime);
			// The output epoch time is 4 hours in advance to the UK epoch
			// timecheck

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return epochTime;
	}

	// Get the String value of date from epoch time
	public static String getDate(long millis) {
		/* Get actual class name to be printed on */
		 Logger log = Logger.getLogger(NBSData.class.getName());


		// long millis = 1366070400;
		Date date = new Date(millis * 1000);
		DateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
		format.setTimeZone(TimeZone.getTimeZone("GMT"));
		String formattedDate = format.format(date);

		log.info("Formatted Date for " +millis+ "is " +formattedDate);

		return formattedDate;
	}
	
	
}









